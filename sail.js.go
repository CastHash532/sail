package main

//go:generate go run sail.js_gen.go
const sailJS = "function startReloadUI() {\n    const div = document.createElement(\"div\")\n    div.className = \"msgbox-overlay\"\n    div.style.opacity = 1\n    div.style.textAlign = \"center\"\n    div.innerHTML = `<div class=\"msgbox\">\n<div class=\"msg\">Reloading container</div>\n</div>`\n    document.querySelector(\".monaco-workbench\").appendChild(div)\n}\n\nfunction removeElementsByClass(className) {\n    let elements = document.getElementsByClassName(className);\n    for (let e of elements) {\n        e.parentNode.removeChild(e)\n    }\n}\n\nfunction stopReloadUI() {\n    removeElementsByClass(\"msgbox-overlay\")\n}\n\nlet tty\nwindow.addEventListener(\"ide-ready\", () => {\n    window.ide.workbench.onFileSaved((ev) => {\n        if (!ev.endsWith(\".sail/Dockerfile\")) {\n            return\n        }\n\n        const srv = window.ide.workbench.terminalService\n\n        if (tty == null) {\n            tty = srv.createTerminal({\n                name: \"sail\",\n                isRendererOnly: true,\n            }, false)\n        } else {\n            tty.clear()\n        }\n        let oldTTY = srv.getActiveInstance()\n        srv.setActiveInstance(tty)\n        // Show the panel and focus it to prevent the user from editing the Dockerfile.\n        srv.showPanel(true)\n\n        startReloadUI()\n\n        const ws = new WebSocket(\"ws://\" + location.host + \"/sail/api/v1/reload\")\n        ws.onmessage = (ev) => {\n            const msg = JSON.parse(ev.data)\n            const out = atob(msg.v).replace(/\\n/g, \"\\n\\r\")\n            tty.write(out)\n        }\n        ws.onclose = (ev) => {\n            if (ev.code === 1000) {\n                srv.setActiveInstance(oldTTY)\n            } else {\n                alert(\"reload failed; please see logs in sail terminal\")\n            }\n            stopReloadUI()\n        }\n    })\n})\n"
